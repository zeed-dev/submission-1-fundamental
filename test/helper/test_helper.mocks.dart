// Mocks generated by Mockito 5.0.15 from annotations
// in food_store_app/test/helper/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;
import 'dart:convert' as _i16;
import 'dart:typed_data' as _i17;

import 'package:dartz/dartz.dart' as _i2;
import 'package:food_store_app/common/failure.dart' as _i7;
import 'package:food_store_app/data/datasource/db/database_helper.dart' as _i14;
import 'package:food_store_app/data/datasource/restaurant_local_data_source.dart'
    as _i12;
import 'package:food_store_app/data/datasource/restaurant_remote_data_source.dart'
    as _i10;
import 'package:food_store_app/data/model/detail_restaurant_model.dart' as _i3;
import 'package:food_store_app/data/model/restaurant_model.dart' as _i11;
import 'package:food_store_app/data/model/restaurant_table.dart' as _i13;
import 'package:food_store_app/domain/entities/restaurant.dart' as _i8;
import 'package:food_store_app/domain/entities/restaurant_detail.dart' as _i9;
import 'package:food_store_app/domain/repositories/restaurant_repositroy.dart'
    as _i5;
import 'package:http/http.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i15;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeRestaurantDetailModel_1 extends _i1.Fake
    implements _i3.RestaurantDetailModel {}

class _FakeResponse_2 extends _i1.Fake implements _i4.Response {}

class _FakeStreamedResponse_3 extends _i1.Fake implements _i4.StreamedResponse {
}

/// A class which mocks [RestaurantRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantRepository extends _i1.Mock
    implements _i5.RestaurantRepository {
  MockRestaurantRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.Restaurant>>> getRestaurant() =>
      (super.noSuchMethod(Invocation.method(#getRestaurant, []),
              returnValue:
                  Future<_i2.Either<_i7.Failure, List<_i8.Restaurant>>>.value(
                      _FakeEither_0<_i7.Failure, List<_i8.Restaurant>>()))
          as _i6.Future<_i2.Either<_i7.Failure, List<_i8.Restaurant>>>);
  @override
  _i6.Future<_i2.Either<_i7.Failure, _i9.RestaurantDetail>> getDetailRestaurant(
          String? id) =>
      (super.noSuchMethod(Invocation.method(#getDetailRestaurant, [id]),
              returnValue:
                  Future<_i2.Either<_i7.Failure, _i9.RestaurantDetail>>.value(
                      _FakeEither_0<_i7.Failure, _i9.RestaurantDetail>()))
          as _i6.Future<_i2.Either<_i7.Failure, _i9.RestaurantDetail>>);
  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.Restaurant>>> searchRestaurant(
          String? query) =>
      (super.noSuchMethod(Invocation.method(#searchRestaurant, [query]),
              returnValue:
                  Future<_i2.Either<_i7.Failure, List<_i8.Restaurant>>>.value(
                      _FakeEither_0<_i7.Failure, List<_i8.Restaurant>>()))
          as _i6.Future<_i2.Either<_i7.Failure, List<_i8.Restaurant>>>);
  @override
  _i6.Future<_i2.Either<_i7.Failure, String>> addReview(
          String? reviews, String? name, String? id) =>
      (super.noSuchMethod(Invocation.method(#addReview, [reviews, name, id]),
              returnValue: Future<_i2.Either<_i7.Failure, String>>.value(
                  _FakeEither_0<_i7.Failure, String>()))
          as _i6.Future<_i2.Either<_i7.Failure, String>>);
  @override
  _i6.Future<_i2.Either<_i7.Failure, String>> saveFavorite(
          _i9.RestaurantDetail? restaurant) =>
      (super.noSuchMethod(Invocation.method(#saveFavorite, [restaurant]),
              returnValue: Future<_i2.Either<_i7.Failure, String>>.value(
                  _FakeEither_0<_i7.Failure, String>()))
          as _i6.Future<_i2.Either<_i7.Failure, String>>);
  @override
  _i6.Future<_i2.Either<_i7.Failure, String>> removeFavorite(
          _i9.RestaurantDetail? restaurant) =>
      (super.noSuchMethod(Invocation.method(#removeFavorite, [restaurant]),
              returnValue: Future<_i2.Either<_i7.Failure, String>>.value(
                  _FakeEither_0<_i7.Failure, String>()))
          as _i6.Future<_i2.Either<_i7.Failure, String>>);
  @override
  _i6.Future<bool> isAddedToFavorite(String? id) =>
      (super.noSuchMethod(Invocation.method(#isAddedToFavorite, [id]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.Restaurant>>>
      getFavoriteRestaurant() => (super.noSuchMethod(
              Invocation.method(#getFavoriteRestaurant, []),
              returnValue:
                  Future<_i2.Either<_i7.Failure, List<_i8.Restaurant>>>.value(
                      _FakeEither_0<_i7.Failure, List<_i8.Restaurant>>()))
          as _i6.Future<_i2.Either<_i7.Failure, List<_i8.Restaurant>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [RestaurantRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantRemoteDataSource extends _i1.Mock
    implements _i10.RestaurantRemoteDataSource {
  MockRestaurantRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i11.RestaurantModel>?> getRestaurant() =>
      (super.noSuchMethod(Invocation.method(#getRestaurant, []),
              returnValue: Future<List<_i11.RestaurantModel>?>.value())
          as _i6.Future<List<_i11.RestaurantModel>?>);
  @override
  _i6.Future<_i3.RestaurantDetailModel> getDetailRestaurant(String? id) =>
      (super.noSuchMethod(Invocation.method(#getDetailRestaurant, [id]),
              returnValue: Future<_i3.RestaurantDetailModel>.value(
                  _FakeRestaurantDetailModel_1()))
          as _i6.Future<_i3.RestaurantDetailModel>);
  @override
  _i6.Future<List<_i11.RestaurantModel>?> searchRestaurant(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchRestaurant, [query]),
              returnValue: Future<List<_i11.RestaurantModel>?>.value())
          as _i6.Future<List<_i11.RestaurantModel>?>);
  @override
  _i6.Future<String> addReview(String? reviews, String? name, String? id) =>
      (super.noSuchMethod(Invocation.method(#addReview, [reviews, name, id]),
          returnValue: Future<String>.value('')) as _i6.Future<String>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [RestaurantLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantLocalDataSource extends _i1.Mock
    implements _i12.RestaurantLocalDataSource {
  MockRestaurantLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<String> insertFavorite(_i13.RestaurantTable? restaurant) =>
      (super.noSuchMethod(Invocation.method(#insertFavorite, [restaurant]),
          returnValue: Future<String>.value('')) as _i6.Future<String>);
  @override
  _i6.Future<String> removeFavorite(_i13.RestaurantTable? restaurant) =>
      (super.noSuchMethod(Invocation.method(#removeFavorite, [restaurant]),
          returnValue: Future<String>.value('')) as _i6.Future<String>);
  @override
  _i6.Future<_i13.RestaurantTable?> getRestaurantById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getRestaurantById, [id]),
              returnValue: Future<_i13.RestaurantTable?>.value())
          as _i6.Future<_i13.RestaurantTable?>);
  @override
  _i6.Future<List<_i13.RestaurantTable>> getRestaurantRestaurant() =>
      (super.noSuchMethod(Invocation.method(#getRestaurantRestaurant, []),
              returnValue: Future<List<_i13.RestaurantTable>>.value(
                  <_i13.RestaurantTable>[]))
          as _i6.Future<List<_i13.RestaurantTable>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i14.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i15.Database?> get database =>
      (super.noSuchMethod(Invocation.getter(#database),
              returnValue: Future<_i15.Database?>.value())
          as _i6.Future<_i15.Database?>);
  @override
  _i6.Future<int> insertFavorite(_i13.RestaurantTable? restaurant) =>
      (super.noSuchMethod(Invocation.method(#insertFavorite, [restaurant]),
          returnValue: Future<int>.value(0)) as _i6.Future<int>);
  @override
  _i6.Future<int> removeRestaurant(_i13.RestaurantTable? restaurant) =>
      (super.noSuchMethod(Invocation.method(#removeRestaurant, [restaurant]),
          returnValue: Future<int>.value(0)) as _i6.Future<int>);
  @override
  _i6.Future<Map<String, dynamic>?> getRestaurantById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getRestaurantById, [id]),
              returnValue: Future<Map<String, dynamic>?>.value())
          as _i6.Future<Map<String, dynamic>?>);
  @override
  _i6.Future<List<Map<String, dynamic>>> getFavoriteRestaurant() =>
      (super.noSuchMethod(Invocation.method(#getFavoriteRestaurant, []),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i6.Future<List<Map<String, dynamic>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i4.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i6.Future<_i4.Response>);
  @override
  _i6.Future<_i4.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i6.Future<_i4.Response>);
  @override
  _i6.Future<_i4.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i16.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i6.Future<_i4.Response>);
  @override
  _i6.Future<_i4.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i16.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i6.Future<_i4.Response>);
  @override
  _i6.Future<_i4.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i16.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i6.Future<_i4.Response>);
  @override
  _i6.Future<_i4.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i16.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i6.Future<_i4.Response>);
  @override
  _i6.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i6.Future<String>);
  @override
  _i6.Future<_i17.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i17.Uint8List>.value(_i17.Uint8List(0)))
          as _i6.Future<_i17.Uint8List>);
  @override
  _i6.Future<_i4.StreamedResponse> send(_i4.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i4.StreamedResponse>.value(_FakeStreamedResponse_3()))
          as _i6.Future<_i4.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
